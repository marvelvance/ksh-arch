
/* : : generated by proto : : */
/* : : generated from /home/marvel/Downloads/ksh/src/src/lib/libast/features/aso by iffe version 2013-11-14 : : */
                  
#ifndef _def_aso_ast
#if !defined(__PROTO__)
#  if defined(__STDC__) || defined(__cplusplus) || defined(_proto) || defined(c_plusplus)
#    if defined(__cplusplus)
#      define __LINKAGE__	"C"
#    else
#      define __LINKAGE__
#    endif
#    define __STDARG__
#    define __PROTO__(x)	x
#    define __OTORP__(x)
#    define __PARAM__(n,o)	n
#    if !defined(__STDC__) && !defined(__cplusplus)
#      if !defined(c_plusplus)
#      	define const
#      endif
#      define signed
#      define void		int
#      define volatile
#      define __V_		char
#    else
#      define __V_		void
#    endif
#  else
#    define __PROTO__(x)	()
#    define __OTORP__(x)	x
#    define __PARAM__(n,o)	o
#    define __LINKAGE__
#    define __V_		char
#    define const
#    define signed
#    define void		int
#    define volatile
#  endif
#  define __MANGLE__	__LINKAGE__
#  if defined(__cplusplus) || defined(c_plusplus)
#    define __VARARG__	...
#  else
#    define __VARARG__
#  endif
#  if defined(__STDARG__)
#    define __VA_START__(p,a)	va_start(p,a)
#  else
#    define __VA_START__(p,a)	va_start(p)
#  endif
#  if !defined(__INLINE__)
#    if defined(__cplusplus)
#      define __INLINE__	extern __MANGLE__ inline
#    else
#      if defined(_WIN32) && !defined(__GNUC__)
#      	define __INLINE__	__inline
#      endif
#    endif
#  endif
#endif
#if !defined(__LINKAGE__)
#define __LINKAGE__		/* 2004-08-11 transition */
#endif

#define _def_aso_ast	1
#define _sys_types	1	/* #include <sys/types.h> ok */
#include <ast_common.h>
#define asointegralof(x)	(((char*)(x))-((char*)0))

/* gcc 4.1+ 64 bit memory atomic operations model */
#define _ASO_INTRINSIC		1

#define asocas8(p,o,n)		__sync_val_compare_and_swap(p,o,n)
#define asoadd8(p,n)		__sync_fetch_and_add(p,n)
#define asosub8(p,n)		__sync_fetch_and_sub(p,n)
#define asoinc8(p)		__sync_fetch_and_add(p,1)
#define asodec8(p)		__sync_fetch_and_sub(p,1)
#define asocas16(p,o,n)		__sync_val_compare_and_swap(p,o,n)
#define asoadd16(p,n)		__sync_fetch_and_add(p,n)
#define asosub16(p,n)		__sync_fetch_and_sub(p,n)
#define asoinc16(p)		__sync_fetch_and_add(p,1)
#define asodec16(p)		__sync_fetch_and_sub(p,1)
#define asocas32(p,o,n)		__sync_val_compare_and_swap(p,o,n)
#define asoadd32(p,n)		__sync_fetch_and_add(p,n)
#define asosub32(p,n)		__sync_fetch_and_sub(p,n)
#define asoinc32(p)		__sync_fetch_and_add(p,1)
#define asodec32(p)		__sync_fetch_and_sub(p,1)
#define asocas64(p,o,n)		__sync_val_compare_and_swap(p,o,n)
#define asoadd64(p,n)		__sync_fetch_and_add(p,n)
#define asosub64(p,n)		__sync_fetch_and_sub(p,n)
#define asoinc64(p)		__sync_fetch_and_add(p,1)
#define asodec64(p)		__sync_fetch_and_sub(p,1)
#if _ast_sizeof_pointer == 8
#define asocasptr(p,o,n)	((__V_*)__sync_val_compare_and_swap(p,asointegralof(o),asointegralof(n)))
#else
#define asocasptr(p,o,n)	((__V_*)__sync_val_compare_and_swap(p,asointegralof(o),asointegralof(n)))
#endif

#if _BLD_aso && defined(__EXPORT__)
#undef __MANGLE__
#define __MANGLE__ __LINKAGE__ __EXPORT__
#endif
#if !_BLD_aso && defined(__IMPORT__)
#undef __MANGLE__
#define __MANGLE__ __LINKAGE__ __IMPORT__
#endif

#ifndef asocas8
extern __MANGLE__ uint8_t			asocas8 __PROTO__((uint8_t volatile*, int, int));
#endif
#ifndef asoget8
extern __MANGLE__ uint8_t			asoget8 __PROTO__((uint8_t volatile*));
#endif
#ifndef asoadd8
extern __MANGLE__ uint8_t			asoadd8 __PROTO__((uint8_t volatile*, int));
#endif
#ifndef asosub8
extern __MANGLE__ uint8_t			asosub8 __PROTO__((uint8_t volatile*, int));
#endif
#ifndef asoinc8
extern __MANGLE__ uint8_t			asoinc8 __PROTO__((uint8_t volatile*));
#endif
#ifndef asodec8
extern __MANGLE__ uint8_t			asodec8 __PROTO__((uint8_t volatile*));
#endif
#ifndef asomin8
extern __MANGLE__ uint8_t			asomin8 __PROTO__((uint8_t volatile*, int));
#endif
#ifndef asomax8
extern __MANGLE__ uint8_t			asomax8 __PROTO__((uint8_t volatile*, int));
#endif

#ifndef asocas16
extern __MANGLE__ uint16_t			asocas16 __PROTO__((uint16_t volatile*, int, int));
#endif
#ifndef asoget16
extern __MANGLE__ uint16_t			asoget16 __PROTO__((uint16_t volatile*));
#endif
#ifndef asoadd16
extern __MANGLE__ uint16_t			asoadd16 __PROTO__((uint16_t volatile*, int));
#endif
#ifndef asosub16
extern __MANGLE__ uint16_t			asosub16 __PROTO__((uint16_t volatile*, int));
#endif
#ifndef asoinc16
extern __MANGLE__ uint16_t			asoinc16 __PROTO__((uint16_t volatile*));
#endif
#ifndef asodec16
extern __MANGLE__ uint16_t			asodec16 __PROTO__((uint16_t volatile*));
#endif
#ifndef asomin16
extern __MANGLE__ uint16_t			asomin16 __PROTO__((uint16_t volatile*, int));
#endif
#ifndef asomax16
extern __MANGLE__ uint16_t			asomax16 __PROTO__((uint16_t volatile*, int));
#endif

#if !defined(asocas32) || _ASO_INTRINSIC > 1
extern __MANGLE__ uint32_t			asocas32 __PROTO__((uint32_t volatile*, uint32_t, uint32_t));
#endif
#ifndef asoget32
extern __MANGLE__ uint32_t			asoget32 __PROTO__((uint32_t volatile*));
#endif
#ifndef asoadd32
extern __MANGLE__ uint32_t			asoadd32 __PROTO__((uint32_t volatile*, uint32_t));
#endif
#ifndef asosub32
extern __MANGLE__ uint32_t			asosub32 __PROTO__((uint32_t volatile*, uint32_t));
#endif
#ifndef asoinc32
extern __MANGLE__ uint32_t			asoinc32 __PROTO__((uint32_t volatile*));
#endif
#ifndef asodec32
extern __MANGLE__ uint32_t			asodec32 __PROTO__((uint32_t volatile*));
#endif
#ifndef asomin32
extern __MANGLE__ uint32_t			asomin32 __PROTO__((uint32_t volatile*, uint32_t));
#endif
#ifndef asomax32
extern __MANGLE__ uint32_t			asomax32 __PROTO__((uint32_t volatile*, uint32_t));
#endif

#ifdef _ast_int8_t

#if !defined(asocas64) || _ASO_INTRINSIC > 1
extern __MANGLE__ uint64_t			asocas64 __PROTO__((uint64_t volatile*, uint64_t, uint64_t));
#endif
#ifndef asoget64
extern __MANGLE__ uint64_t			asoget64 __PROTO__((uint64_t volatile*));
#endif
#ifndef asoadd64
extern __MANGLE__ uint64_t			asoadd64 __PROTO__((uint64_t volatile*, uint64_t));
#endif
#ifndef asosub64
extern __MANGLE__ uint64_t			asosub64 __PROTO__((uint64_t volatile*, uint64_t));
#endif
#ifndef asoinc64
extern __MANGLE__ uint64_t			asoinc64 __PROTO__((uint64_t volatile*));
#endif
#ifndef asodec64
extern __MANGLE__ uint64_t			asodec64 __PROTO__((uint64_t volatile*));
#endif
#ifndef asomin64
extern __MANGLE__ uint64_t			asomin64 __PROTO__((uint64_t volatile*, uint64_t));
#endif
#ifndef asomax64
extern __MANGLE__ uint64_t			asomax64 __PROTO__((uint64_t volatile*, uint64_t));
#endif

#endif

#ifndef asocasptr
extern __MANGLE__ __V_*			asocasptr __PROTO__((void volatile*, __V_*, __V_*));
#endif
#ifndef asogetptr
extern __MANGLE__ __V_*			asogetptr __PROTO__((void volatile*));
#endif

#undef __MANGLE__
#define __MANGLE__ __LINKAGE__


#endif
